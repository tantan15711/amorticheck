{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{jsPDF}from'jspdf';import autoTable from'jspdf-autotable';import DiagnosticWidget from'./components/DiagnosticWidget.jsx';import ControlPanel from'./components/ControlPanel.jsx';import'./App.css';// Tipos de amortiguadores con sus características específicas\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TIPOS_AMORTIGUADORES=[{id:'hidraulico',nombre:'Amortiguador Hidráulico',descripcion:'Utiliza aceite para absorber energía a través de válvulas internas',pruebas:['Prueba de Fuerza vs. Velocidad (SAE J2788)','Prueba de Cavitación (ASTM D4172)','Prueba de Fugas de Aceite'],sensores:[{id:'vibracion',min:0,max:100,unidad:'Hz',color:'#1E88E5',icono:'📳',nombre:'Vibración'},{id:'presion',min:0,max:100,unidad:'kPa',color:'#1565C0',icono:'💨',nombre:'Presión'},{id:'temperatura',min:0,max:150,unidad:'°C',color:'#0D47A1',icono:'🌡️',nombre:'Temperatura'},{id:'fuerza',min:0,max:1000,unidad:'N',color:'#1976D2',icono:'⚡',nombre:'Fuerza'}]},{id:'gas_monotubo',nombre:'Amortiguador de Gas (Monotubo)',descripcion:'Usa aceite y gas nitrógeno a alta presión para mejor respuesta',pruebas:['Medición de Presión de Gas (20-30 bar)','Prueba de Respuesta Rápida (ISO 18137)','Prueba de Durabilidad (500,000 ciclos)'],sensores:[{id:'vibracion',min:0,max:100,unidad:'Hz',color:'#1E88E5',icono:'📳',nombre:'Vibración'},{id:'presion',min:0,max:100,unidad:'kPa',color:'#1565C0',icono:'💨',nombre:'Presión'},{id:'temperatura',min:0,max:150,unidad:'°C',color:'#0D47A1',icono:'🌡️',nombre:'Temperatura'},{id:'fuerza',min:0,max:1000,unidad:'N',color:'#1976D2',icono:'⚡',nombre:'Fuerza'},{id:'presion_gas',min:0,max:40,unidad:'bar',color:'#FF5722',icono:'⛽',nombre:'Presión Gas'}]},{id:'gas_dobletubo',nombre:'Amortiguador de Gas (Doble Tubo)',descripcion:'Combina aceite con gas nitrógeno a baja presión',pruebas:['Prueba de Estanqueidad en Agua','Prueba de Impacto (Salt Test)','Prueba de Fuerza Dinámica'],sensores:[{id:'vibracion',min:0,max:100,unidad:'Hz',color:'#1E88E5',icono:'📳',nombre:'Vibración'},{id:'presion',min:0,max:100,unidad:'kPa',color:'#1565C0',icono:'💨',nombre:'Presión'},{id:'temperatura',min:0,max:150,unidad:'°C',color:'#0D47A1',icono:'🌡️',nombre:'Temperatura'},{id:'fuerza',min:0,max:1000,unidad:'N',color:'#1976D2',icono:'⚡',nombre:'Fuerza'}]},{id:'regulable',nombre:'Amortiguador Regulable',descripcion:'Permite ajustar la dureza (modos Sport/Comfort)',pruebas:['Prueba de Resistencia Eléctrica (2-10 Ω)','Prueba de Respuesta a Señales PWM','Prueba de Compatibilidad CAN Bus'],sensores:[{id:'vibracion',min:0,max:100,unidad:'Hz',color:'#1E88E5',icono:'📳',nombre:'Vibración'},{id:'presion',min:0,max:100,unidad:'kPa',color:'#1565C0',icono:'💨',nombre:'Presión'},{id:'temperatura',min:0,max:150,unidad:'°C',color:'#0D47A1',icono:'🌡️',nombre:'Temperatura'},{id:'fuerza',min:0,max:1000,unidad:'N',color:'#1976D2',icono:'⚡',nombre:'Fuerza'},{id:'resistencia',min:0,max:20,unidad:'Ω',color:'#9C27B0',icono:'🔌',nombre:'Resistencia'}]}];// Fabricantes con sus estándares específicos\nconst FABRICANTES=[{id:'bilstein',nombre:'Bilstein',norma:'B46-0001',presionGas:'25-30 bar',ciclosFatiga:'500,000'},{id:'kyb',nombre:'KYB',norma:'KES 07.202',presionGas:'N/A',ciclosFatiga:'200,000'},{id:'monroe',nombre:'Monroe',norma:'M-CARE 3.0',presionGas:'N/A',ciclosFatiga:'200,000'},{id:'ohlins',nombre:'Öhlins',norma:'TTX Series',presionGas:'20-25 bar',ciclosFatiga:'1,000,000+'},{id:'sachs',nombre:'Sachs',norma:'SRE 4.2',presionGas:'N/A',ciclosFatiga:'300,000'}];function App(){const[tipoAmortiguador,setTipoAmortiguador]=useState('gas_monotubo');const[fabricante,setFabricante]=useState('bilstein');const[datosSensores,setDatosSensores]=useState({});const[diagnostico,setDiagnostico]=useState({estado:'Desconocido',descripcion:'Selecciona el tipo de amortiguador y fabricante para comenzar',color:'#9E9E9E',icono:'❓'});const[estadoConexion]=useState({conectado:true,mensaje:'Sistema listo'});const[error]=useState(null);const[lecturaActiva,setLecturaActiva]=useState(false);const[mostrarSensores,setMostrarSensores]=useState(false);const[procesando,setProcesando]=useState(false);const[porcentajeProgreso,setPorcentajeProgreso]=useState(0);const[datosFinales,setDatosFinales]=useState(null);const[pruebasRealizadas,setPruebasRealizadas]=useState([]);const[contadorDiagnosticos,setContadorDiagnosticos]=useState(0);const lecturaActivaRef=useRef(lecturaActiva);const intervaloRef=useRef(null);const progresoRef=useRef(null);const timeoutFinalRef=useRef(null);const timeoutInicioSimRef=useRef(null);const valoresBaseRef=useRef(null);const pruebasIntervalRef=useRef(null);// Inicializar datos de sensores según el tipo seleccionado\nuseEffect(()=>{const tipo=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);const datosIniciales={};tipo.sensores.forEach(sensor=>{datosIniciales[sensor.id]={actual:0,historial:[],min:0,max:0,promedio:0};});setDatosSensores(datosIniciales);},[tipoAmortiguador]);// Mantener la ref actualizada\nuseEffect(()=>{lecturaActivaRef.current=lecturaActiva;},[lecturaActiva]);// Limpiar intervalos y timeouts al desmontar\nuseEffect(()=>{return()=>{clearRefs();};},[]);// Función para limpiar todas las referencias\nconst clearRefs=()=>{if(intervaloRef.current)clearInterval(intervaloRef.current);if(progresoRef.current)clearInterval(progresoRef.current);if(timeoutFinalRef.current)clearTimeout(timeoutFinalRef.current);if(timeoutInicioSimRef.current)clearTimeout(timeoutInicioSimRef.current);if(pruebasIntervalRef.current)clearInterval(pruebasIntervalRef.current);intervaloRef.current=null;progresoRef.current=null;timeoutFinalRef.current=null;timeoutInicioSimRef.current=null;pruebasIntervalRef.current=null;};// Iniciar/detener la lectura\nconst toggleLectura=()=>{const nuevoEstado=!lecturaActiva;setLecturaActiva(nuevoEstado);if(nuevoEstado){// Limpiar cualquier proceso previo\nclearRefs();// Resetear datos a ceros\nconst tipo=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);const datosIniciales={};tipo.sensores.forEach(sensor=>{datosIniciales[sensor.id]={actual:0,historial:[],min:0,max:0,promedio:0};});setDatosSensores(datosIniciales);setPruebasRealizadas([]);setProcesando(true);setPorcentajeProgreso(0);setDatosFinales(null);// Mensaje de evaluación inicial\nsetDiagnostico({estado:'Evaluando',descripcion:'Iniciando pruebas específicas...',color:'#FF9800',icono:'⏳'});// Barra de progreso (30 segundos)\nconst startTime=Date.now();progresoRef.current=setInterval(()=>{const elapsed=Date.now()-startTime;const progress=Math.min(100,elapsed/30000*100);// Mostrar como número entero\nsetPorcentajeProgreso(Math.round(progress));},100);// Retraso aleatorio para inicio de simulación (10-15 segundos)\nconst delay=10000+Math.random()*5000;timeoutInicioSimRef.current=setTimeout(()=>{setDiagnostico({estado:'Evaluando',descripcion:'Realizando pruebas técnicas...',color:'#FF9800',icono:'⏳'});iniciarSimulacion();},delay);// Programar el diagnóstico final después de 30 segundos\ntimeoutFinalRef.current=setTimeout(()=>{const estados=['ÓPTIMO','CRÍTICO','ACEPTABLE'];const descripciones=['El amortiguador funciona en condiciones óptimas según los estándares del fabricante.','El amortiguador requiere intervención inmediata según los resultados de las pruebas.','El amortiguador muestra signos de desgaste, se recomienda revisión.'];const colores=['#4CAF50','#F44336','#FF9800'];const iconos=['✅','❌','⚠️'];// Obtener el estado actual basado en el contador (0,1,2) y luego rotar\nconst estadoActual=contadorDiagnosticos%3;// Guardar los datos finales antes de detener\nsetDatosSensores(prev=>{setDatosFinales({...prev});return prev;});setDiagnostico({estado:estados[estadoActual],descripcion:descripciones[estadoActual],color:colores[estadoActual],icono:iconos[estadoActual]});// Incrementar el contador para el próximo diagnóstico\nsetContadorDiagnosticos(prev=>prev+1);setProcesando(false);},30000);// 30 segundos\n}else{// Detener completamente\nsetProcesando(false);setPorcentajeProgreso(0);// Limpiar todos los intervalos y timeouts\nclearRefs();// Resetear datos a ceros\nconst tipo=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);const datosIniciales={};tipo.sensores.forEach(sensor=>{datosIniciales[sensor.id]={actual:0,historial:[],min:0,max:0,promedio:0};});setDatosSensores(datosIniciales);// Volver al estado inicial\nsetDiagnostico({estado:'Desconocido',descripcion:'Diagnóstico detenido. Listo para nueva evaluación.',color:'#9E9E9E',icono:'❓'});}};// Obtener valores base según tipo de amortiguador\nconst obtenerValoresBase=()=>{const tipo=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);// Valores base según el estado del amortiguador\nconst valoresBase={0:{// ÓPTIMO\nvibracion:{min:5,max:15},presion:{min:30,max:50},temperatura:{min:25,max:40},fuerza:{min:700,max:900},presion_gas:{min:tipo.id==='gas_monotubo'?25:0,max:tipo.id==='gas_monotubo'?30:0},resistencia:{min:2,max:10}},1:{// CRÍTICO\nvibracion:{min:40,max:60},presion:{min:5,max:20},temperatura:{min:60,max:80},fuerza:{min:200,max:400},presion_gas:{min:tipo.id==='gas_monotubo'?10:0,max:tipo.id==='gas_monotubo'?15:0},resistencia:{min:0,max:1}},2:{// ACEPTABLE\nvibracion:{min:20,max:35},presion:{min:20,max:40},temperatura:{min:40,max:55},fuerza:{min:500,max:700},presion_gas:{min:tipo.id==='gas_monotubo'?20:0,max:tipo.id==='gas_monotubo'?25:0},resistencia:{min:1,max:2}}};return valoresBase;};// Iniciar simulación realista\nconst iniciarSimulacion=()=>{const valoresBase=obtenerValoresBase();const estado=Math.floor(Math.random()*3);// Estado aleatorio para simulación\nvaloresBaseRef.current=valoresBase[estado];const tipo=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);// Crear datos iniciales\nconst datosIniciales={};tipo.sensores.forEach(sensor=>{var _valoresBaseRef$curre,_valoresBaseRef$curre2,_valoresBaseRef$curre3,_valoresBaseRef$curre4;datosIniciales[sensor.id]={actual:((_valoresBaseRef$curre=valoresBaseRef.current[sensor.id])===null||_valoresBaseRef$curre===void 0?void 0:_valoresBaseRef$curre.min)||0,historial:[],min:((_valoresBaseRef$curre2=valoresBaseRef.current[sensor.id])===null||_valoresBaseRef$curre2===void 0?void 0:_valoresBaseRef$curre2.min)||0,max:((_valoresBaseRef$curre3=valoresBaseRef.current[sensor.id])===null||_valoresBaseRef$curre3===void 0?void 0:_valoresBaseRef$curre3.min)||0,promedio:((_valoresBaseRef$curre4=valoresBaseRef.current[sensor.id])===null||_valoresBaseRef$curre4===void 0?void 0:_valoresBaseRef$curre4.min)||0};});setDatosSensores(datosIniciales);// Iniciar pruebas específicas\npruebasIntervalRef.current=setInterval(()=>{const pruebaIndex=Math.floor(Math.random()*tipo.pruebas.length);if(!pruebasRealizadas.includes(tipo.pruebas[pruebaIndex])){setPruebasRealizadas(prev=>[...prev,tipo.pruebas[pruebaIndex]]);}},5000);// Iniciar intervalo para actualizar datos\nif(intervaloRef.current)clearInterval(intervaloRef.current);intervaloRef.current=setInterval(()=>{setDatosSensores(prev=>{const nuevosDatos={...prev};tipo.sensores.forEach(sensor=>{const clave=sensor.id;const base=valoresBaseRef.current[clave];if(!base)return;// Generar nuevo valor con variación realista\nconst variacion=(Math.random()-0.5)*(base.max-base.min)*0.1;const nuevoValor=Math.max(base.min,Math.min(base.max,prev[clave].actual+variacion));// Mantener valores dentro de límites realistas\nconst historial=[...prev[clave].historial,nuevoValor].slice(-30);const min=Math.min(prev[clave].min,nuevoValor);const max=Math.max(prev[clave].max,nuevoValor);const promedio=historial.reduce((a,b)=>a+b,0)/historial.length;nuevosDatos[clave]={actual:+nuevoValor.toFixed(2),historial,min:+min.toFixed(2),max:+max.toFixed(2),promedio:+promedio.toFixed(2)};});return nuevosDatos;});},500);// Actualizar cada 500ms para una apariencia realista\n};// Generar y descargar reporte PDF\nconst generarReporte=()=>{const tipo=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);const fabricanteActual=FABRICANTES.find(f=>f.id===fabricante);// Usar datos finales si están disponibles\nconst datosParaReporte=datosFinales||datosSensores;// Crear nuevo documento PDF\nconst doc=new jsPDF();// Logo y título\ntry{doc.addImage(`${process.env.PUBLIC_URL}/amorticheck.png`,'PNG',80,10,50,20);}catch(e){console.log(\"Logo no cargado\");}doc.setFontSize(20);doc.setFont('helvetica','bold');doc.text(\"Reporte Técnico de Diagnóstico\",105,40,{align:'center'});// Información del amortiguador\ndoc.setFontSize(12);doc.setFont('helvetica','bold');doc.text(\"Tipo de Amortiguador:\",20,55);doc.setFont('helvetica','normal');doc.text(`${tipo.nombre} - ${tipo.descripcion}`,20,62);doc.setFont('helvetica','bold');doc.text(\"Fabricante:\",20,72);doc.setFont('helvetica','normal');doc.text(`${fabricanteActual.nombre} (Norma: ${fabricanteActual.norma})`,20,79);// Estado y fecha\ndoc.setFont('helvetica','bold');doc.text(\"Estado del Diagnóstico:\",20,89);doc.setFont('helvetica','normal');doc.text(`${diagnostico.estado} - ${diagnostico.descripcion}`,20,96);doc.setFont('helvetica','bold');doc.text(\"Fecha:\",20,106);doc.setFont('helvetica','normal');doc.text(`${new Date().toLocaleDateString()}`,20,113);// Pruebas realizadas\ndoc.setFont('helvetica','bold');doc.text(\"Pruebas Realizadas:\",20,123);doc.setFont('helvetica','normal');const pruebasY=130;tipo.pruebas.forEach((prueba,index)=>{const yPos=pruebasY+index*7;doc.text(`• ${prueba}`,20,yPos);});// Datos de sensores\nconst startY=pruebasY+tipo.pruebas.length*7+10;doc.setFont('helvetica','bold');doc.text(\"Datos Técnicos de Sensores:\",20,startY);// Tabla de sensores\nconst headers=[['Sensor','Valor','Mínimo','Máximo','Promedio']];const data=tipo.sensores.map(sensor=>{const dato=datosParaReporte[sensor.id];return[sensor.nombre,`${Math.round(dato.actual)} ${sensor.unidad}`,`${Math.round(dato.min)} ${sensor.unidad}`,`${Math.round(dato.max)} ${sensor.unidad}`,`${Math.round(dato.promedio)} ${sensor.unidad}`];});autoTable(doc,{startY:startY+5,head:headers,body:data,theme:'grid',styles:{fontSize:10},headStyles:{fillColor:'#2c3e50'}});// Estándares del fabricante\nconst finalY=doc.lastAutoTable?doc.lastAutoTable.finalY+10:150;doc.setFont('helvetica','bold');doc.text(\"Estándares del Fabricante:\",20,finalY);doc.setFontSize(11);doc.setFont('helvetica','normal');const recomendaciones=[`• Norma aplicada: ${fabricanteActual.norma}`,`• Presión de gas: ${fabricanteActual.presionGas}`,`• Ciclos de fatiga: ${fabricanteActual.ciclosFatiga}`];const splitRecomendaciones=doc.splitTextToSize(recomendaciones.join('\\n'),170);doc.text(splitRecomendaciones,20,finalY+10);// Pie de página\ndoc.setFontSize(10);doc.setTextColor(100);doc.text(\"Sistema AmortiCheck Pro © \"+new Date().getFullYear(),105,280,{align:'center'});// Descargar el PDF\nconst fechaReporte=new Date().toISOString().slice(0,10);doc.save(`reporte-${tipo.id}-${fechaReporte}.pdf`);};const tipoActual=TIPOS_AMORTIGUADORES.find(t=>t.id===tipoAmortiguador);const fabricanteActual=FABRICANTES.find(f=>f.id===fabricante);return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"logo-container\",children:/*#__PURE__*/_jsx(\"img\",{src:`${process.env.PUBLIC_URL}/amorticheck.png`,alt:\"Logo AmortiCheck\",className:\"app-logo\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"app-title\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"title-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"AMORTICHECK PRO\"}),/*#__PURE__*/_jsx(\"p\",{className:\"app-subtitle\",children:\"Sistema Avanzado de Diagn\\xF3stico de Amortiguadores\"})]})})]}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-message\",children:[\"\\u26A0\\uFE0F \",error]}),/*#__PURE__*/_jsxs(\"div\",{className:\"configuration-panel\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Configuraci\\xF3n del Diagn\\xF3stico\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-row\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"config-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Tipo de Amortiguador:\"}),/*#__PURE__*/_jsx(\"select\",{value:tipoAmortiguador,onChange:e=>setTipoAmortiguador(e.target.value),disabled:lecturaActiva,children:TIPOS_AMORTIGUADORES.map(tipo=>/*#__PURE__*/_jsx(\"option\",{value:tipo.id,children:tipo.nombre},tipo.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Fabricante:\"}),/*#__PURE__*/_jsx(\"select\",{value:fabricante,onChange:e=>setFabricante(e.target.value),disabled:lecturaActiva,children:FABRICANTES.map(fab=>/*#__PURE__*/_jsx(\"option\",{value:fab.id,children:fab.nombre},fab.id))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-description\",children:[/*#__PURE__*/_jsxs(\"strong\",{children:[tipoActual.nombre,\":\"]}),\" \",tipoActual.descripcion]}),/*#__PURE__*/_jsxs(\"div\",{className:\"config-standards\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Est\\xE1ndares del Fabricante:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Norma:\"}),\" \",fabricanteActual.norma]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Presi\\xF3n de gas:\"}),\" \",fabricanteActual.presionGas]}),/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Ciclos de fatiga:\"}),\" \",fabricanteActual.ciclosFatiga]})]})]})]}),/*#__PURE__*/_jsx(ControlPanel,{estadoConexion:estadoConexion,lecturaActiva:lecturaActiva,toggleLectura:toggleLectura}),/*#__PURE__*/_jsx(\"div\",{className:\"sensors-toggle\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>setMostrarSensores(!mostrarSensores),className:\"btn view-sensors\",children:mostrarSensores?'OCULTAR SENSORES':'VER DATOS TÉCNICOS'})}),mostrarSensores&&/*#__PURE__*/_jsxs(\"div\",{className:\"sensors-section\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"sensors-table-container\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"sensors-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Sensor\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Valor\"}),/*#__PURE__*/_jsx(\"th\",{children:\"M\\xEDnimo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"M\\xE1ximo\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Promedio\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:tipoActual.sensores.map(sensor=>{const dato=datosSensores[sensor.id];return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"sensor-icon\",style:{color:sensor.color},children:sensor.icono}),sensor.nombre]}),/*#__PURE__*/_jsxs(\"td\",{children:[Math.round((dato===null||dato===void 0?void 0:dato.actual)||0),\" \",sensor.unidad]}),/*#__PURE__*/_jsxs(\"td\",{children:[Math.round((dato===null||dato===void 0?void 0:dato.min)||0),\" \",sensor.unidad]}),/*#__PURE__*/_jsxs(\"td\",{children:[Math.round((dato===null||dato===void 0?void 0:dato.max)||0),\" \",sensor.unidad]}),/*#__PURE__*/_jsxs(\"td\",{children:[Math.round((dato===null||dato===void 0?void 0:dato.promedio)||0),\" \",sensor.unidad]})]},sensor.id);})})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"tests-container\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Pruebas Espec\\xEDficas Realizadas:\"}),/*#__PURE__*/_jsx(\"ul\",{children:pruebasRealizadas.map((prueba,index)=>/*#__PURE__*/_jsx(\"li\",{children:prueba},index))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"diagnostic-section\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"DIAGN\\xD3STICO T\\xC9CNICO\"}),/*#__PURE__*/_jsx(DiagnosticWidget,{diagnostico:diagnostico,generarReporte:generarReporte,procesando:procesando,porcentajeProgreso:porcentajeProgreso,lecturaActiva:lecturaActiva})]}),/*#__PURE__*/_jsx(\"footer\",{className:\"app-footer\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Sistema AmortiCheck Pro \\xA9 \",new Date().getFullYear()]})})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsPDF","autoTable","DiagnosticWidget","ControlPanel","jsx","_jsx","jsxs","_jsxs","TIPOS_AMORTIGUADORES","id","nombre","descripcion","pruebas","sensores","min","max","unidad","color","icono","FABRICANTES","norma","presionGas","ciclosFatiga","App","tipoAmortiguador","setTipoAmortiguador","fabricante","setFabricante","datosSensores","setDatosSensores","diagnostico","setDiagnostico","estado","estadoConexion","conectado","mensaje","error","lecturaActiva","setLecturaActiva","mostrarSensores","setMostrarSensores","procesando","setProcesando","porcentajeProgreso","setPorcentajeProgreso","datosFinales","setDatosFinales","pruebasRealizadas","setPruebasRealizadas","contadorDiagnosticos","setContadorDiagnosticos","lecturaActivaRef","intervaloRef","progresoRef","timeoutFinalRef","timeoutInicioSimRef","valoresBaseRef","pruebasIntervalRef","tipo","find","t","datosIniciales","forEach","sensor","actual","historial","promedio","current","clearRefs","clearInterval","clearTimeout","toggleLectura","nuevoEstado","startTime","Date","now","setInterval","elapsed","progress","Math","round","delay","random","setTimeout","iniciarSimulacion","estados","descripciones","colores","iconos","estadoActual","prev","obtenerValoresBase","valoresBase","vibracion","presion","temperatura","fuerza","presion_gas","resistencia","floor","_valoresBaseRef$curre","_valoresBaseRef$curre2","_valoresBaseRef$curre3","_valoresBaseRef$curre4","pruebaIndex","length","includes","nuevosDatos","clave","base","variacion","nuevoValor","slice","reduce","a","b","toFixed","generarReporte","fabricanteActual","f","datosParaReporte","doc","addImage","process","env","PUBLIC_URL","e","console","log","setFontSize","setFont","text","align","toLocaleDateString","pruebasY","prueba","index","yPos","startY","headers","data","map","dato","head","body","theme","styles","fontSize","headStyles","fillColor","finalY","lastAutoTable","recomendaciones","splitRecomendaciones","splitTextToSize","join","setTextColor","getFullYear","fechaReporte","toISOString","save","tipoActual","className","children","src","alt","value","onChange","target","disabled","fab","onClick","style"],"sources":["C:/Users/TANTAN157/amorticheck-pro/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { jsPDF } from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport DiagnosticWidget from './components/DiagnosticWidget.jsx';\nimport ControlPanel from './components/ControlPanel.jsx';\nimport './App.css';\n\n// Tipos de amortiguadores con sus características específicas\nconst TIPOS_AMORTIGUADORES = [\n  { \n    id: 'hidraulico', \n    nombre: 'Amortiguador Hidráulico',\n    descripcion: 'Utiliza aceite para absorber energía a través de válvulas internas',\n    pruebas: [\n      'Prueba de Fuerza vs. Velocidad (SAE J2788)',\n      'Prueba de Cavitación (ASTM D4172)',\n      'Prueba de Fugas de Aceite'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: '📳', nombre: 'Vibración' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: '💨', nombre: 'Presión' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '°C', color: '#0D47A1', icono: '🌡️', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '⚡', nombre: 'Fuerza' },\n    ]\n  },\n  { \n    id: 'gas_monotubo', \n    nombre: 'Amortiguador de Gas (Monotubo)',\n    descripcion: 'Usa aceite y gas nitrógeno a alta presión para mejor respuesta',\n    pruebas: [\n      'Medición de Presión de Gas (20-30 bar)',\n      'Prueba de Respuesta Rápida (ISO 18137)',\n      'Prueba de Durabilidad (500,000 ciclos)'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: '📳', nombre: 'Vibración' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: '💨', nombre: 'Presión' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '°C', color: '#0D47A1', icono: '🌡️', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '⚡', nombre: 'Fuerza' },\n      { id: 'presion_gas', min: 0, max: 40, unidad: 'bar', color: '#FF5722', icono: '⛽', nombre: 'Presión Gas' },\n    ]\n  },\n  { \n    id: 'gas_dobletubo', \n    nombre: 'Amortiguador de Gas (Doble Tubo)',\n    descripcion: 'Combina aceite con gas nitrógeno a baja presión',\n    pruebas: [\n      'Prueba de Estanqueidad en Agua',\n      'Prueba de Impacto (Salt Test)',\n      'Prueba de Fuerza Dinámica'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: '📳', nombre: 'Vibración' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: '💨', nombre: 'Presión' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '°C', color: '#0D47A1', icono: '🌡️', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '⚡', nombre: 'Fuerza' },\n    ]\n  },\n  { \n    id: 'regulable', \n    nombre: 'Amortiguador Regulable',\n    descripcion: 'Permite ajustar la dureza (modos Sport/Comfort)',\n    pruebas: [\n      'Prueba de Resistencia Eléctrica (2-10 Ω)',\n      'Prueba de Respuesta a Señales PWM',\n      'Prueba de Compatibilidad CAN Bus'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: '📳', nombre: 'Vibración' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: '💨', nombre: 'Presión' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '°C', color: '#0D47A1', icono: '🌡️', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '⚡', nombre: 'Fuerza' },\n      { id: 'resistencia', min: 0, max: 20, unidad: 'Ω', color: '#9C27B0', icono: '🔌', nombre: 'Resistencia' },\n    ]\n  }\n];\n\n// Fabricantes con sus estándares específicos\nconst FABRICANTES = [\n  { id: 'bilstein', nombre: 'Bilstein', norma: 'B46-0001', presionGas: '25-30 bar', ciclosFatiga: '500,000' },\n  { id: 'kyb', nombre: 'KYB', norma: 'KES 07.202', presionGas: 'N/A', ciclosFatiga: '200,000' },\n  { id: 'monroe', nombre: 'Monroe', norma: 'M-CARE 3.0', presionGas: 'N/A', ciclosFatiga: '200,000' },\n  { id: 'ohlins', nombre: 'Öhlins', norma: 'TTX Series', presionGas: '20-25 bar', ciclosFatiga: '1,000,000+' },\n  { id: 'sachs', nombre: 'Sachs', norma: 'SRE 4.2', presionGas: 'N/A', ciclosFatiga: '300,000' },\n];\n\nfunction App() {\n  const [tipoAmortiguador, setTipoAmortiguador] = useState('gas_monotubo');\n  const [fabricante, setFabricante] = useState('bilstein');\n  const [datosSensores, setDatosSensores] = useState({});\n  const [diagnostico, setDiagnostico] = useState({\n    estado: 'Desconocido',\n    descripcion: 'Selecciona el tipo de amortiguador y fabricante para comenzar',\n    color: '#9E9E9E',\n    icono: '❓',\n  });\n  const [estadoConexion,] = useState({\n    conectado: true,\n    mensaje: 'Sistema listo',\n  });\n  const [error, ] = useState(null);\n  const [lecturaActiva, setLecturaActiva] = useState(false);\n  const [mostrarSensores, setMostrarSensores] = useState(false);\n  const [procesando, setProcesando] = useState(false);\n  const [porcentajeProgreso, setPorcentajeProgreso] = useState(0);\n  const [datosFinales, setDatosFinales] = useState(null);\n  const [pruebasRealizadas, setPruebasRealizadas] = useState([]);\n  const [contadorDiagnosticos, setContadorDiagnosticos] = useState(0);\n  \n  const lecturaActivaRef = useRef(lecturaActiva);\n  const intervaloRef = useRef(null);\n  const progresoRef = useRef(null);\n  const timeoutFinalRef = useRef(null);\n  const timeoutInicioSimRef = useRef(null);\n  const valoresBaseRef = useRef(null);\n  const pruebasIntervalRef = useRef(null);\n\n  // Inicializar datos de sensores según el tipo seleccionado\n  useEffect(() => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    const datosIniciales = {};\n    \n    tipo.sensores.forEach(sensor => {\n      datosIniciales[sensor.id] = {\n        actual: 0,\n        historial: [],\n        min: 0,\n        max: 0,\n        promedio: 0\n      };\n    });\n    \n    setDatosSensores(datosIniciales);\n  }, [tipoAmortiguador]);\n\n  // Mantener la ref actualizada\n  useEffect(() => {\n    lecturaActivaRef.current = lecturaActiva;\n  }, [lecturaActiva]);\n\n  // Limpiar intervalos y timeouts al desmontar\n  useEffect(() => {\n    return () => {\n      clearRefs();\n    };\n  }, []);\n\n  // Función para limpiar todas las referencias\n  const clearRefs = () => {\n    if (intervaloRef.current) clearInterval(intervaloRef.current);\n    if (progresoRef.current) clearInterval(progresoRef.current);\n    if (timeoutFinalRef.current) clearTimeout(timeoutFinalRef.current);\n    if (timeoutInicioSimRef.current) clearTimeout(timeoutInicioSimRef.current);\n    if (pruebasIntervalRef.current) clearInterval(pruebasIntervalRef.current);\n    \n    intervaloRef.current = null;\n    progresoRef.current = null;\n    timeoutFinalRef.current = null;\n    timeoutInicioSimRef.current = null;\n    pruebasIntervalRef.current = null;\n  };\n\n  // Iniciar/detener la lectura\n  const toggleLectura = () => {\n    const nuevoEstado = !lecturaActiva;\n    setLecturaActiva(nuevoEstado);\n    \n    if (nuevoEstado) {\n      // Limpiar cualquier proceso previo\n      clearRefs();\n      \n      // Resetear datos a ceros\n      const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n      const datosIniciales = {};\n      \n      tipo.sensores.forEach(sensor => {\n        datosIniciales[sensor.id] = {\n          actual: 0,\n          historial: [],\n          min: 0,\n          max: 0,\n          promedio: 0\n        };\n      });\n      \n      setDatosSensores(datosIniciales);\n      setPruebasRealizadas([]);\n      \n      setProcesando(true);\n      setPorcentajeProgreso(0);\n      setDatosFinales(null);\n      \n      // Mensaje de evaluación inicial\n      setDiagnostico({\n        estado: 'Evaluando',\n        descripcion: 'Iniciando pruebas específicas...',\n        color: '#FF9800',\n        icono: '⏳',\n      });\n      \n      // Barra de progreso (30 segundos)\n      const startTime = Date.now();\n      progresoRef.current = setInterval(() => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(100, (elapsed / 30000) * 100);\n        // Mostrar como número entero\n        setPorcentajeProgreso(Math.round(progress));\n      }, 100);\n      \n      // Retraso aleatorio para inicio de simulación (10-15 segundos)\n      const delay = 10000 + Math.random() * 5000;\n      timeoutInicioSimRef.current = setTimeout(() => {\n        setDiagnostico({\n          estado: 'Evaluando',\n          descripcion: 'Realizando pruebas técnicas...',\n          color: '#FF9800',\n          icono: '⏳',\n        });\n        \n        iniciarSimulacion();\n      }, delay);\n\n      // Programar el diagnóstico final después de 30 segundos\n      timeoutFinalRef.current = setTimeout(() => {\n        const estados = ['ÓPTIMO', 'CRÍTICO', 'ACEPTABLE'];\n        const descripciones = [\n          'El amortiguador funciona en condiciones óptimas según los estándares del fabricante.',\n          'El amortiguador requiere intervención inmediata según los resultados de las pruebas.',\n          'El amortiguador muestra signos de desgaste, se recomienda revisión.'\n        ];\n        const colores = ['#4CAF50', '#F44336', '#FF9800'];\n        const iconos = ['✅', '❌', '⚠️'];\n        \n        // Obtener el estado actual basado en el contador (0,1,2) y luego rotar\n        const estadoActual = contadorDiagnosticos % 3;\n        \n        // Guardar los datos finales antes de detener\n        setDatosSensores(prev => {\n          setDatosFinales({...prev});\n          return prev;\n        });\n        \n        setDiagnostico({\n          estado: estados[estadoActual],\n          descripcion: descripciones[estadoActual],\n          color: colores[estadoActual],\n          icono: iconos[estadoActual],\n        });\n        \n        // Incrementar el contador para el próximo diagnóstico\n        setContadorDiagnosticos(prev => prev + 1);\n        \n        setProcesando(false);\n      }, 30000); // 30 segundos\n    } else {\n      // Detener completamente\n      setProcesando(false);\n      setPorcentajeProgreso(0);\n      \n      // Limpiar todos los intervalos y timeouts\n      clearRefs();\n      \n      // Resetear datos a ceros\n      const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n      const datosIniciales = {};\n      \n      tipo.sensores.forEach(sensor => {\n        datosIniciales[sensor.id] = {\n          actual: 0,\n          historial: [],\n          min: 0,\n          max: 0,\n          promedio: 0\n        };\n      });\n      \n      setDatosSensores(datosIniciales);\n      \n      // Volver al estado inicial\n      setDiagnostico({\n        estado: 'Desconocido',\n        descripcion: 'Diagnóstico detenido. Listo para nueva evaluación.',\n        color: '#9E9E9E',\n        icono: '❓',\n      });\n    }\n  };\n\n  // Obtener valores base según tipo de amortiguador\n  const obtenerValoresBase = () => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    \n    // Valores base según el estado del amortiguador\n    const valoresBase = {\n      0: { // ÓPTIMO\n        vibracion: { min: 5, max: 15 },\n        presion: { min: 30, max: 50 },\n        temperatura: { min: 25, max: 40 },\n        fuerza: { min: 700, max: 900 },\n        presion_gas: { min: tipo.id === 'gas_monotubo' ? 25 : 0, max: tipo.id === 'gas_monotubo' ? 30 : 0 },\n        resistencia: { min: 2, max: 10 }\n      },\n      1: { // CRÍTICO\n        vibracion: { min: 40, max: 60 },\n        presion: { min: 5, max: 20 },\n        temperatura: { min: 60, max: 80 },\n        fuerza: { min: 200, max: 400 },\n        presion_gas: { min: tipo.id === 'gas_monotubo' ? 10 : 0, max: tipo.id === 'gas_monotubo' ? 15 : 0 },\n        resistencia: { min: 0, max: 1 }\n      },\n      2: { // ACEPTABLE\n        vibracion: { min: 20, max: 35 },\n        presion: { min: 20, max: 40 },\n        temperatura: { min: 40, max: 55 },\n        fuerza: { min: 500, max: 700 },\n        presion_gas: { min: tipo.id === 'gas_monotubo' ? 20 : 0, max: tipo.id === 'gas_monotubo' ? 25 : 0 },\n        resistencia: { min: 1, max: 2 }\n      }\n    };\n    \n    return valoresBase;\n  };\n\n  // Iniciar simulación realista\n  const iniciarSimulacion = () => {\n    const valoresBase = obtenerValoresBase();\n    const estado = Math.floor(Math.random() * 3); // Estado aleatorio para simulación\n    \n    valoresBaseRef.current = valoresBase[estado];\n    \n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    \n    // Crear datos iniciales\n    const datosIniciales = {};\n    tipo.sensores.forEach(sensor => {\n      datosIniciales[sensor.id] = {\n        actual: valoresBaseRef.current[sensor.id]?.min || 0,\n        historial: [],\n        min: valoresBaseRef.current[sensor.id]?.min || 0,\n        max: valoresBaseRef.current[sensor.id]?.min || 0,\n        promedio: valoresBaseRef.current[sensor.id]?.min || 0\n      };\n    });\n    \n    setDatosSensores(datosIniciales);\n    \n    // Iniciar pruebas específicas\n    pruebasIntervalRef.current = setInterval(() => {\n      const pruebaIndex = Math.floor(Math.random() * tipo.pruebas.length);\n      if (!pruebasRealizadas.includes(tipo.pruebas[pruebaIndex])) {\n        setPruebasRealizadas(prev => [...prev, tipo.pruebas[pruebaIndex]]);\n      }\n    }, 5000);\n    \n    // Iniciar intervalo para actualizar datos\n    if (intervaloRef.current) clearInterval(intervaloRef.current);\n    \n    intervaloRef.current = setInterval(() => {\n      setDatosSensores(prev => {\n        const nuevosDatos = { ...prev };\n        \n        tipo.sensores.forEach(sensor => {\n          const clave = sensor.id;\n          const base = valoresBaseRef.current[clave];\n          \n          if (!base) return;\n          \n          // Generar nuevo valor con variación realista\n          const variacion = (Math.random() - 0.5) * (base.max - base.min) * 0.1;\n          const nuevoValor = Math.max(\n            base.min, \n            Math.min(\n              base.max, \n              prev[clave].actual + variacion\n            )\n          );\n          \n          // Mantener valores dentro de límites realistas\n          const historial = [...prev[clave].historial, nuevoValor].slice(-30);\n          const min = Math.min(prev[clave].min, nuevoValor);\n          const max = Math.max(prev[clave].max, nuevoValor);\n          const promedio = historial.reduce((a, b) => a + b, 0) / historial.length;\n          \n          nuevosDatos[clave] = {\n            actual: +nuevoValor.toFixed(2),\n            historial,\n            min: +min.toFixed(2),\n            max: +max.toFixed(2),\n            promedio: +promedio.toFixed(2),\n          };\n        });\n        \n        return nuevosDatos;\n      });\n    }, 500); // Actualizar cada 500ms para una apariencia realista\n  };\n\n  // Generar y descargar reporte PDF\n  const generarReporte = () => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    const fabricanteActual = FABRICANTES.find(f => f.id === fabricante);\n    \n    // Usar datos finales si están disponibles\n    const datosParaReporte = datosFinales || datosSensores;\n    \n    // Crear nuevo documento PDF\n    const doc = new jsPDF();\n    \n    // Logo y título\n    try {\n      doc.addImage(`${process.env.PUBLIC_URL}/amorticheck.png`, 'PNG', 80, 10, 50, 20);\n    } catch (e) {\n      console.log(\"Logo no cargado\");\n    }\n    \n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Reporte Técnico de Diagnóstico\", 105, 40, { align: 'center' });\n    \n    // Información del amortiguador\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Tipo de Amortiguador:\", 20, 55);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${tipo.nombre} - ${tipo.descripcion}`, 20, 62);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Fabricante:\", 20, 72);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${fabricanteActual.nombre} (Norma: ${fabricanteActual.norma})`, 20, 79);\n    \n    // Estado y fecha\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Estado del Diagnóstico:\", 20, 89);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${diagnostico.estado} - ${diagnostico.descripcion}`, 20, 96);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Fecha:\", 20, 106);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${new Date().toLocaleDateString()}`, 20, 113);\n    \n    // Pruebas realizadas\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Pruebas Realizadas:\", 20, 123);\n    doc.setFont('helvetica', 'normal');\n    const pruebasY = 130;\n    tipo.pruebas.forEach((prueba, index) => {\n      const yPos = pruebasY + (index * 7);\n      doc.text(`• ${prueba}`, 20, yPos);\n    });\n    \n    // Datos de sensores\n    const startY = pruebasY + (tipo.pruebas.length * 7) + 10;\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Datos Técnicos de Sensores:\", 20, startY);\n    \n    // Tabla de sensores\n    const headers = [['Sensor', 'Valor', 'Mínimo', 'Máximo', 'Promedio']];\n    const data = tipo.sensores.map(sensor => {\n      const dato = datosParaReporte[sensor.id];\n      return [\n        sensor.nombre, \n        `${Math.round(dato.actual)} ${sensor.unidad}`, \n        `${Math.round(dato.min)} ${sensor.unidad}`, \n        `${Math.round(dato.max)} ${sensor.unidad}`, \n        `${Math.round(dato.promedio)} ${sensor.unidad}`\n      ];\n    });\n    \n    autoTable(doc, {\n      startY: startY + 5,\n      head: headers,\n      body: data,\n      theme: 'grid',\n      styles: { fontSize: 10 },\n      headStyles: { fillColor: '#2c3e50' }\n    });\n    \n    // Estándares del fabricante\n    const finalY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 150;\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Estándares del Fabricante:\", 20, finalY);\n    \n    doc.setFontSize(11);\n    doc.setFont('helvetica', 'normal');\n    const recomendaciones = [\n      `• Norma aplicada: ${fabricanteActual.norma}`,\n      `• Presión de gas: ${fabricanteActual.presionGas}`,\n      `• Ciclos de fatiga: ${fabricanteActual.ciclosFatiga}`\n    ];\n    const splitRecomendaciones = doc.splitTextToSize(recomendaciones.join('\\n'), 170);\n    doc.text(splitRecomendaciones, 20, finalY + 10);\n    \n    // Pie de página\n    doc.setFontSize(10);\n    doc.setTextColor(100);\n    doc.text(\"Sistema AmortiCheck Pro © \" + new Date().getFullYear(), 105, 280, { align: 'center' });\n    \n    // Descargar el PDF\n    const fechaReporte = new Date().toISOString().slice(0, 10);\n    doc.save(`reporte-${tipo.id}-${fechaReporte}.pdf`);\n  };\n\n  const tipoActual = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n  const fabricanteActual = FABRICANTES.find(f => f.id === fabricante);\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <div className=\"logo-container\">\n          <img src={`${process.env.PUBLIC_URL}/amorticheck.png`} alt=\"Logo AmortiCheck\" className=\"app-logo\" />\n        </div>\n        <div className=\"app-title\">\n          <div className=\"title-container\">\n            <h1>AMORTICHECK PRO</h1>\n            <p className=\"app-subtitle\">Sistema Avanzado de Diagnóstico de Amortiguadores</p>\n          </div>\n        </div>\n      </header>\n      \n      {error && (\n        <div className=\"error-message\">\n          ⚠️ {error}\n        </div>\n      )}\n      \n      <div className=\"configuration-panel\">\n        <h3>Configuración del Diagnóstico</h3>\n        \n        <div className=\"config-row\">\n          <div className=\"config-group\">\n            <label>Tipo de Amortiguador:</label>\n            <select \n              value={tipoAmortiguador} \n              onChange={(e) => setTipoAmortiguador(e.target.value)}\n              disabled={lecturaActiva}\n            >\n              {TIPOS_AMORTIGUADORES.map(tipo => (\n                <option key={tipo.id} value={tipo.id}>{tipo.nombre}</option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"config-group\">\n            <label>Fabricante:</label>\n            <select \n              value={fabricante} \n              onChange={(e) => setFabricante(e.target.value)}\n              disabled={lecturaActiva}\n            >\n              {FABRICANTES.map(fab => (\n                <option key={fab.id} value={fab.id}>{fab.nombre}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n        \n        <div className=\"config-description\">\n          <strong>{tipoActual.nombre}:</strong> {tipoActual.descripcion}\n        </div>\n        \n        <div className=\"config-standards\">\n          <h4>Estándares del Fabricante:</h4>\n          <ul>\n            <li><strong>Norma:</strong> {fabricanteActual.norma}</li>\n            <li><strong>Presión de gas:</strong> {fabricanteActual.presionGas}</li>\n            <li><strong>Ciclos de fatiga:</strong> {fabricanteActual.ciclosFatiga}</li>\n          </ul>\n        </div>\n      </div>\n      \n      <ControlPanel \n        estadoConexion={estadoConexion}\n        lecturaActiva={lecturaActiva}\n        toggleLectura={toggleLectura}\n      />\n      \n      <div className=\"sensors-toggle\">\n        <button \n          onClick={() => setMostrarSensores(!mostrarSensores)}\n          className=\"btn view-sensors\"\n        >\n          {mostrarSensores ? 'OCULTAR SENSORES' : 'VER DATOS TÉCNICOS'}\n        </button>\n      </div>\n      \n      {mostrarSensores && (\n        <div className=\"sensors-section\">\n          <div className=\"sensors-table-container\">\n            <table className=\"sensors-table\">\n              <thead>\n                <tr>\n                  <th>Sensor</th>\n                  <th>Valor</th>\n                  <th>Mínimo</th>\n                  <th>Máximo</th>\n                  <th>Promedio</th>\n                </tr>\n              </thead>\n              <tbody>\n                {tipoActual.sensores.map(sensor => {\n                  const dato = datosSensores[sensor.id];\n                  \n                  return (\n                    <tr key={sensor.id}>\n                      <td>\n                        <span className=\"sensor-icon\" style={{ color: sensor.color }}>\n                          {sensor.icono}\n                        </span>\n                        {sensor.nombre}\n                      </td>\n                      <td>{Math.round(dato?.actual || 0)} {sensor.unidad}</td>\n                      <td>{Math.round(dato?.min || 0)} {sensor.unidad}</td>\n                      <td>{Math.round(dato?.max || 0)} {sensor.unidad}</td>\n                      <td>{Math.round(dato?.promedio || 0)} {sensor.unidad}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"tests-container\">\n            <h4>Pruebas Específicas Realizadas:</h4>\n            <ul>\n              {pruebasRealizadas.map((prueba, index) => (\n                <li key={index}>{prueba}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"diagnostic-section\">\n        <h2>DIAGNÓSTICO TÉCNICO</h2>\n        <DiagnosticWidget \n          diagnostico={diagnostico} \n          generarReporte={generarReporte} \n          procesando={procesando}\n          porcentajeProgreso={porcentajeProgreso}\n          lecturaActiva={lecturaActiva}\n        />\n      </div>\n      \n      <footer className=\"app-footer\">\n        <p>Sistema AmortiCheck Pro &copy; {new Date().getFullYear()}</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}