{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TANTAN157\\\\amorticheck-pro\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsPDF } from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport DiagnosticWidget from './components/DiagnosticWidget.jsx';\nimport ControlPanel from './components/ControlPanel.jsx';\nimport './App.css';\n\n// Tipos de amortiguadores con sus caracter√≠sticas espec√≠ficas\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TIPOS_AMORTIGUADORES = [{\n  id: 'hidraulico',\n  nombre: 'Amortiguador Hidr√°ulico',\n  descripcion: 'Utiliza aceite para absorber energ√≠a a trav√©s de v√°lvulas internas',\n  pruebas: ['Prueba de Fuerza vs. Velocidad (SAE J2788)', 'Prueba de Cavitaci√≥n (ASTM D4172)', 'Prueba de Fugas de Aceite'],\n  sensores: [{\n    id: 'vibracion',\n    min: 0,\n    max: 100,\n    unidad: 'Hz',\n    color: '#1E88E5',\n    icono: 'üì≥',\n    nombre: 'Vibraci√≥n'\n  }, {\n    id: 'presion',\n    min: 0,\n    max: 100,\n    unidad: 'kPa',\n    color: '#1565C0',\n    icono: 'üí®',\n    nombre: 'Presi√≥n'\n  }, {\n    id: 'temperatura',\n    min: 0,\n    max: 150,\n    unidad: '¬∞C',\n    color: '#0D47A1',\n    icono: 'üå°Ô∏è',\n    nombre: 'Temperatura'\n  }, {\n    id: 'fuerza',\n    min: 0,\n    max: 1000,\n    unidad: 'N',\n    color: '#1976D2',\n    icono: '‚ö°',\n    nombre: 'Fuerza'\n  }]\n}, {\n  id: 'gas_monotubo',\n  nombre: 'Amortiguador de Gas (Monotubo)',\n  descripcion: 'Usa aceite y gas nitr√≥geno a alta presi√≥n para mejor respuesta',\n  pruebas: ['Medici√≥n de Presi√≥n de Gas (20-30 bar)', 'Prueba de Respuesta R√°pida (ISO 18137)', 'Prueba de Durabilidad (500,000 ciclos)'],\n  sensores: [{\n    id: 'vibracion',\n    min: 0,\n    max: 100,\n    unidad: 'Hz',\n    color: '#1E88E5',\n    icono: 'üì≥',\n    nombre: 'Vibraci√≥n'\n  }, {\n    id: 'presion',\n    min: 0,\n    max: 100,\n    unidad: 'kPa',\n    color: '#1565C0',\n    icono: 'üí®',\n    nombre: 'Presi√≥n'\n  }, {\n    id: 'temperatura',\n    min: 0,\n    max: 150,\n    unidad: '¬∞C',\n    color: '#0D47A1',\n    icono: 'üå°Ô∏è',\n    nombre: 'Temperatura'\n  }, {\n    id: 'fuerza',\n    min: 0,\n    max: 1000,\n    unidad: 'N',\n    color: '#1976D2',\n    icono: '‚ö°',\n    nombre: 'Fuerza'\n  }, {\n    id: 'presion_gas',\n    min: 0,\n    max: 40,\n    unidad: 'bar',\n    color: '#FF5722',\n    icono: '‚õΩ',\n    nombre: 'Presi√≥n Gas'\n  }]\n}, {\n  id: 'gas_dobletubo',\n  nombre: 'Amortiguador de Gas (Doble Tubo)',\n  descripcion: 'Combina aceite con gas nitr√≥geno a baja presi√≥n',\n  pruebas: ['Prueba de Estanqueidad en Agua', 'Prueba de Impacto (Salt Test)', 'Prueba de Fuerza Din√°mica'],\n  sensores: [{\n    id: 'vibracion',\n    min: 0,\n    max: 100,\n    unidad: 'Hz',\n    color: '#1E88E5',\n    icono: 'üì≥',\n    nombre: 'Vibraci√≥n'\n  }, {\n    id: 'presion',\n    min: 0,\n    max: 100,\n    unidad: 'kPa',\n    color: '#1565C0',\n    icono: 'üí®',\n    nombre: 'Presi√≥n'\n  }, {\n    id: 'temperatura',\n    min: 0,\n    max: 150,\n    unidad: '¬∞C',\n    color: '#0D47A1',\n    icono: 'üå°Ô∏è',\n    nombre: 'Temperatura'\n  }, {\n    id: 'fuerza',\n    min: 0,\n    max: 1000,\n    unidad: 'N',\n    color: '#1976D2',\n    icono: '‚ö°',\n    nombre: 'Fuerza'\n  }]\n}, {\n  id: 'regulable',\n  nombre: 'Amortiguador Regulable',\n  descripcion: 'Permite ajustar la dureza (modos Sport/Comfort)',\n  pruebas: ['Prueba de Resistencia El√©ctrica (2-10 Œ©)', 'Prueba de Respuesta a Se√±ales PWM', 'Prueba de Compatibilidad CAN Bus'],\n  sensores: [{\n    id: 'vibracion',\n    min: 0,\n    max: 100,\n    unidad: 'Hz',\n    color: '#1E88E5',\n    icono: 'üì≥',\n    nombre: 'Vibraci√≥n'\n  }, {\n    id: 'presion',\n    min: 0,\n    max: 100,\n    unidad: 'kPa',\n    color: '#1565C0',\n    icono: 'üí®',\n    nombre: 'Presi√≥n'\n  }, {\n    id: 'temperatura',\n    min: 0,\n    max: 150,\n    unidad: '¬∞C',\n    color: '#0D47A1',\n    icono: 'üå°Ô∏è',\n    nombre: 'Temperatura'\n  }, {\n    id: 'fuerza',\n    min: 0,\n    max: 1000,\n    unidad: 'N',\n    color: '#1976D2',\n    icono: '‚ö°',\n    nombre: 'Fuerza'\n  }, {\n    id: 'resistencia',\n    min: 0,\n    max: 20,\n    unidad: 'Œ©',\n    color: '#9C27B0',\n    icono: 'üîå',\n    nombre: 'Resistencia'\n  }]\n}];\n\n// Fabricantes con sus est√°ndares espec√≠ficos\nconst FABRICANTES = [{\n  id: 'bilstein',\n  nombre: 'Bilstein',\n  norma: 'B46-0001',\n  presionGas: '25-30 bar',\n  ciclosFatiga: '500,000'\n}, {\n  id: 'kyb',\n  nombre: 'KYB',\n  norma: 'KES 07.202',\n  presionGas: 'N/A',\n  ciclosFatiga: '200,000'\n}, {\n  id: 'monroe',\n  nombre: 'Monroe',\n  norma: 'M-CARE 3.0',\n  presionGas: 'N/A',\n  ciclosFatiga: '200,000'\n}, {\n  id: 'ohlins',\n  nombre: '√ñhlins',\n  norma: 'TTX Series',\n  presionGas: '20-25 bar',\n  ciclosFatiga: '1,000,000+'\n}, {\n  id: 'sachs',\n  nombre: 'Sachs',\n  norma: 'SRE 4.2',\n  presionGas: 'N/A',\n  ciclosFatiga: '300,000'\n}];\nfunction App() {\n  _s();\n  const [tipoAmortiguador, setTipoAmortiguador] = useState('gas_monotubo');\n  const [fabricante, setFabricante] = useState('bilstein');\n  const [datosSensores, setDatosSensores] = useState({});\n  const [diagnostico, setDiagnostico] = useState({\n    estado: 'Desconocido',\n    descripcion: 'Selecciona el tipo de amortiguador y fabricante para comenzar',\n    color: '#9E9E9E',\n    icono: '‚ùì'\n  });\n  const [estadoConexion] = useState({\n    conectado: true,\n    mensaje: 'Sistema listo'\n  });\n  const [error] = useState(null);\n  const [lecturaActiva, setLecturaActiva] = useState(false);\n  const [mostrarSensores, setMostrarSensores] = useState(false);\n  const [procesando, setProcesando] = useState(false);\n  const [porcentajeProgreso, setPorcentajeProgreso] = useState(0);\n  const [datosFinales, setDatosFinales] = useState(null);\n  const [pruebasRealizadas, setPruebasRealizadas] = useState([]);\n  const [contadorDiagnosticos, setContadorDiagnosticos] = useState(0);\n  const lecturaActivaRef = useRef(lecturaActiva);\n  const intervaloRef = useRef(null);\n  const progresoRef = useRef(null);\n  const timeoutFinalRef = useRef(null);\n  const timeoutInicioSimRef = useRef(null);\n  const valoresBaseRef = useRef(null);\n  const pruebasIntervalRef = useRef(null);\n\n  // Inicializar datos de sensores seg√∫n el tipo seleccionado\n  useEffect(() => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    const datosIniciales = {};\n    tipo.sensores.forEach(sensor => {\n      datosIniciales[sensor.id] = {\n        actual: 0,\n        historial: [],\n        min: 0,\n        max: 0,\n        promedio: 0\n      };\n    });\n    setDatosSensores(datosIniciales);\n  }, [tipoAmortiguador]);\n\n  // Mantener la ref actualizada\n  useEffect(() => {\n    lecturaActivaRef.current = lecturaActiva;\n  }, [lecturaActiva]);\n\n  // Limpiar intervalos y timeouts al desmontar\n  useEffect(() => {\n    return () => {\n      clearRefs();\n    };\n  }, []);\n\n  // Funci√≥n para limpiar todas las referencias\n  const clearRefs = () => {\n    if (intervaloRef.current) clearInterval(intervaloRef.current);\n    if (progresoRef.current) clearInterval(progresoRef.current);\n    if (timeoutFinalRef.current) clearTimeout(timeoutFinalRef.current);\n    if (timeoutInicioSimRef.current) clearTimeout(timeoutInicioSimRef.current);\n    if (pruebasIntervalRef.current) clearInterval(pruebasIntervalRef.current);\n    intervaloRef.current = null;\n    progresoRef.current = null;\n    timeoutFinalRef.current = null;\n    timeoutInicioSimRef.current = null;\n    pruebasIntervalRef.current = null;\n  };\n\n  // Iniciar/detener la lectura\n  const toggleLectura = () => {\n    const nuevoEstado = !lecturaActiva;\n    setLecturaActiva(nuevoEstado);\n    if (nuevoEstado) {\n      // Limpiar cualquier proceso previo\n      clearRefs();\n\n      // Resetear datos a ceros\n      const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n      const datosIniciales = {};\n      tipo.sensores.forEach(sensor => {\n        datosIniciales[sensor.id] = {\n          actual: 0,\n          historial: [],\n          min: 0,\n          max: 0,\n          promedio: 0\n        };\n      });\n      setDatosSensores(datosIniciales);\n      setPruebasRealizadas([]);\n      setProcesando(true);\n      setPorcentajeProgreso(0);\n      setDatosFinales(null);\n\n      // Mensaje de evaluaci√≥n inicial\n      setDiagnostico({\n        estado: 'Evaluando',\n        descripcion: 'Iniciando pruebas espec√≠ficas...',\n        color: '#FF9800',\n        icono: '‚è≥'\n      });\n\n      // Barra de progreso (30 segundos)\n      const startTime = Date.now();\n      progresoRef.current = setInterval(() => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(100, elapsed / 30000 * 100);\n        // Mostrar como n√∫mero entero\n        setPorcentajeProgreso(Math.round(progress));\n      }, 100);\n\n      // Retraso aleatorio para inicio de simulaci√≥n (10-15 segundos)\n      const delay = 10000 + Math.random() * 5000;\n      timeoutInicioSimRef.current = setTimeout(() => {\n        setDiagnostico({\n          estado: 'Evaluando',\n          descripcion: 'Realizando pruebas t√©cnicas...',\n          color: '#FF9800',\n          icono: '‚è≥'\n        });\n        iniciarSimulacion();\n      }, delay);\n\n      // Programar el diagn√≥stico final despu√©s de 30 segundos\n      timeoutFinalRef.current = setTimeout(() => {\n        const estados = ['√ìPTIMO', 'CR√çTICO', 'ACEPTABLE'];\n        const descripciones = ['El amortiguador funciona en condiciones √≥ptimas seg√∫n los est√°ndares del fabricante.', 'El amortiguador requiere intervenci√≥n inmediata seg√∫n los resultados de las pruebas.', 'El amortiguador muestra signos de desgaste, se recomienda revisi√≥n.'];\n        const colores = ['#4CAF50', '#F44336', '#FF9800'];\n        const iconos = ['‚úÖ', '‚ùå', '‚ö†Ô∏è'];\n\n        // Obtener el estado actual basado en el contador (0,1,2) y luego rotar\n        const estadoActual = contadorDiagnosticos % 3;\n\n        // Guardar los datos finales antes de detener\n        setDatosSensores(prev => {\n          setDatosFinales({\n            ...prev\n          });\n          return prev;\n        });\n        setDiagnostico({\n          estado: estados[estadoActual],\n          descripcion: descripciones[estadoActual],\n          color: colores[estadoActual],\n          icono: iconos[estadoActual]\n        });\n\n        // Incrementar el contador para el pr√≥ximo diagn√≥stico\n        setContadorDiagnosticos(prev => prev + 1);\n        setProcesando(false);\n      }, 30000); // 30 segundos\n    } else {\n      // Detener completamente\n      setProcesando(false);\n      setPorcentajeProgreso(0);\n\n      // Limpiar todos los intervalos y timeouts\n      clearRefs();\n\n      // Resetear datos a ceros\n      const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n      const datosIniciales = {};\n      tipo.sensores.forEach(sensor => {\n        datosIniciales[sensor.id] = {\n          actual: 0,\n          historial: [],\n          min: 0,\n          max: 0,\n          promedio: 0\n        };\n      });\n      setDatosSensores(datosIniciales);\n\n      // Volver al estado inicial\n      setDiagnostico({\n        estado: 'Desconocido',\n        descripcion: 'Diagn√≥stico detenido. Listo para nueva evaluaci√≥n.',\n        color: '#9E9E9E',\n        icono: '‚ùì'\n      });\n    }\n  };\n\n  // Obtener valores base seg√∫n tipo de amortiguador\n  const obtenerValoresBase = () => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n\n    // Valores base seg√∫n el estado del amortiguador\n    const valoresBase = {\n      0: {\n        // √ìPTIMO\n        vibracion: {\n          min: 5,\n          max: 15\n        },\n        presion: {\n          min: 30,\n          max: 50\n        },\n        temperatura: {\n          min: 25,\n          max: 40\n        },\n        fuerza: {\n          min: 700,\n          max: 900\n        },\n        presion_gas: {\n          min: tipo.id === 'gas_monotubo' ? 25 : 0,\n          max: tipo.id === 'gas_monotubo' ? 30 : 0\n        },\n        resistencia: {\n          min: 2,\n          max: 10\n        }\n      },\n      1: {\n        // CR√çTICO\n        vibracion: {\n          min: 40,\n          max: 60\n        },\n        presion: {\n          min: 5,\n          max: 20\n        },\n        temperatura: {\n          min: 60,\n          max: 80\n        },\n        fuerza: {\n          min: 200,\n          max: 400\n        },\n        presion_gas: {\n          min: tipo.id === 'gas_monotubo' ? 10 : 0,\n          max: tipo.id === 'gas_monotubo' ? 15 : 0\n        },\n        resistencia: {\n          min: 0,\n          max: 1\n        }\n      },\n      2: {\n        // ACEPTABLE\n        vibracion: {\n          min: 20,\n          max: 35\n        },\n        presion: {\n          min: 20,\n          max: 40\n        },\n        temperatura: {\n          min: 40,\n          max: 55\n        },\n        fuerza: {\n          min: 500,\n          max: 700\n        },\n        presion_gas: {\n          min: tipo.id === 'gas_monotubo' ? 20 : 0,\n          max: tipo.id === 'gas_monotubo' ? 25 : 0\n        },\n        resistencia: {\n          min: 1,\n          max: 2\n        }\n      }\n    };\n    return valoresBase;\n  };\n\n  // Iniciar simulaci√≥n realista\n  const iniciarSimulacion = () => {\n    const valoresBase = obtenerValoresBase();\n    const estado = Math.floor(Math.random() * 3); // Estado aleatorio para simulaci√≥n\n\n    valoresBaseRef.current = valoresBase[estado];\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n\n    // Crear datos iniciales\n    const datosIniciales = {};\n    tipo.sensores.forEach(sensor => {\n      var _valoresBaseRef$curre, _valoresBaseRef$curre2, _valoresBaseRef$curre3, _valoresBaseRef$curre4;\n      datosIniciales[sensor.id] = {\n        actual: ((_valoresBaseRef$curre = valoresBaseRef.current[sensor.id]) === null || _valoresBaseRef$curre === void 0 ? void 0 : _valoresBaseRef$curre.min) || 0,\n        historial: [],\n        min: ((_valoresBaseRef$curre2 = valoresBaseRef.current[sensor.id]) === null || _valoresBaseRef$curre2 === void 0 ? void 0 : _valoresBaseRef$curre2.min) || 0,\n        max: ((_valoresBaseRef$curre3 = valoresBaseRef.current[sensor.id]) === null || _valoresBaseRef$curre3 === void 0 ? void 0 : _valoresBaseRef$curre3.min) || 0,\n        promedio: ((_valoresBaseRef$curre4 = valoresBaseRef.current[sensor.id]) === null || _valoresBaseRef$curre4 === void 0 ? void 0 : _valoresBaseRef$curre4.min) || 0\n      };\n    });\n    setDatosSensores(datosIniciales);\n\n    // Iniciar pruebas espec√≠ficas\n    pruebasIntervalRef.current = setInterval(() => {\n      const pruebaIndex = Math.floor(Math.random() * tipo.pruebas.length);\n      if (!pruebasRealizadas.includes(tipo.pruebas[pruebaIndex])) {\n        setPruebasRealizadas(prev => [...prev, tipo.pruebas[pruebaIndex]]);\n      }\n    }, 5000);\n\n    // Iniciar intervalo para actualizar datos\n    if (intervaloRef.current) clearInterval(intervaloRef.current);\n    intervaloRef.current = setInterval(() => {\n      setDatosSensores(prev => {\n        const nuevosDatos = {\n          ...prev\n        };\n        tipo.sensores.forEach(sensor => {\n          const clave = sensor.id;\n          const base = valoresBaseRef.current[clave];\n          if (!base) return;\n\n          // Generar nuevo valor con variaci√≥n realista\n          const variacion = (Math.random() - 0.5) * (base.max - base.min) * 0.1;\n          const nuevoValor = Math.max(base.min, Math.min(base.max, prev[clave].actual + variacion));\n\n          // Mantener valores dentro de l√≠mites realistas\n          const historial = [...prev[clave].historial, nuevoValor].slice(-30);\n          const min = Math.min(prev[clave].min, nuevoValor);\n          const max = Math.max(prev[clave].max, nuevoValor);\n          const promedio = historial.reduce((a, b) => a + b, 0) / historial.length;\n          nuevosDatos[clave] = {\n            actual: +nuevoValor.toFixed(2),\n            historial,\n            min: +min.toFixed(2),\n            max: +max.toFixed(2),\n            promedio: +promedio.toFixed(2)\n          };\n        });\n        return nuevosDatos;\n      });\n    }, 500); // Actualizar cada 500ms para una apariencia realista\n  };\n\n  // Generar y descargar reporte PDF\n  const generarReporte = () => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    const fabricanteActual = FABRICANTES.find(f => f.id === fabricante);\n\n    // Usar datos finales si est√°n disponibles\n    const datosParaReporte = datosFinales || datosSensores;\n\n    // Crear nuevo documento PDF\n    const doc = new jsPDF();\n\n    // Logo y t√≠tulo\n    try {\n      doc.addImage(`${process.env.PUBLIC_URL}/amorticheck.png`, 'PNG', 80, 10, 50, 20);\n    } catch (e) {\n      console.log(\"Logo no cargado\");\n    }\n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Reporte T√©cnico de Diagn√≥stico\", 105, 40, {\n      align: 'center'\n    });\n\n    // Informaci√≥n del amortiguador\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Tipo de Amortiguador:\", 20, 55);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${tipo.nombre} - ${tipo.descripcion}`, 20, 62);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Fabricante:\", 20, 72);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${fabricanteActual.nombre} (Norma: ${fabricanteActual.norma})`, 20, 79);\n\n    // Estado y fecha\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Estado del Diagn√≥stico:\", 20, 89);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${diagnostico.estado} - ${diagnostico.descripcion}`, 20, 96);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Fecha:\", 20, 106);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${new Date().toLocaleDateString()}`, 20, 113);\n\n    // Pruebas realizadas\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Pruebas Realizadas:\", 20, 123);\n    doc.setFont('helvetica', 'normal');\n    const pruebasY = 130;\n    tipo.pruebas.forEach((prueba, index) => {\n      const yPos = pruebasY + index * 7;\n      doc.text(`‚Ä¢ ${prueba}`, 20, yPos);\n    });\n\n    // Datos de sensores\n    const startY = pruebasY + tipo.pruebas.length * 7 + 10;\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Datos T√©cnicos de Sensores:\", 20, startY);\n\n    // Tabla de sensores\n    const headers = [['Sensor', 'Valor', 'M√≠nimo', 'M√°ximo', 'Promedio']];\n    const data = tipo.sensores.map(sensor => {\n      const dato = datosParaReporte[sensor.id];\n      return [sensor.nombre, `${Math.round(dato.actual)} ${sensor.unidad}`, `${Math.round(dato.min)} ${sensor.unidad}`, `${Math.round(dato.max)} ${sensor.unidad}`, `${Math.round(dato.promedio)} ${sensor.unidad}`];\n    });\n    autoTable(doc, {\n      startY: startY + 5,\n      head: headers,\n      body: data,\n      theme: 'grid',\n      styles: {\n        fontSize: 10\n      },\n      headStyles: {\n        fillColor: '#2c3e50'\n      }\n    });\n\n    // Est√°ndares del fabricante\n    const finalY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 150;\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Est√°ndares del Fabricante:\", 20, finalY);\n    doc.setFontSize(11);\n    doc.setFont('helvetica', 'normal');\n    const recomendaciones = [`‚Ä¢ Norma aplicada: ${fabricanteActual.norma}`, `‚Ä¢ Presi√≥n de gas: ${fabricanteActual.presionGas}`, `‚Ä¢ Ciclos de fatiga: ${fabricanteActual.ciclosFatiga}`];\n    const splitRecomendaciones = doc.splitTextToSize(recomendaciones.join('\\n'), 170);\n    doc.text(splitRecomendaciones, 20, finalY + 10);\n\n    // Pie de p√°gina\n    doc.setFontSize(10);\n    doc.setTextColor(100);\n    doc.text(\"Sistema AmortiCheck Pro ¬© \" + new Date().getFullYear(), 105, 280, {\n      align: 'center'\n    });\n\n    // Descargar el PDF\n    const fechaReporte = new Date().toISOString().slice(0, 10);\n    doc.save(`reporte-${tipo.id}-${fechaReporte}.pdf`);\n  };\n  const tipoActual = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n  const fabricanteActual = FABRICANTES.find(f => f.id === fabricante);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-container\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${process.env.PUBLIC_URL}/amorticheck.png`,\n          alt: \"Logo AmortiCheck\",\n          className: \"app-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-title\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"AMORTICHECK PRO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"app-subtitle\",\n            children: \"Sistema Avanzado de Diagn\\xF3stico de Amortiguadores\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 517,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [\"\\u26A0\\uFE0F \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"configuration-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Configuraci\\xF3n del Diagn\\xF3stico\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"config-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"config-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Tipo de Amortiguador:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: tipoAmortiguador,\n            onChange: e => setTipoAmortiguador(e.target.value),\n            disabled: lecturaActiva,\n            children: TIPOS_AMORTIGUADORES.map(tipo => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: tipo.id,\n              children: tipo.nombre\n            }, tipo.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"config-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Fabricante:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: fabricante,\n            onChange: e => setFabricante(e.target.value),\n            disabled: lecturaActiva,\n            children: FABRICANTES.map(fab => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: fab.id,\n              children: fab.nombre\n            }, fab.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"config-description\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [tipoActual.nombre, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), \" \", tipoActual.descripcion]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"config-standards\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Est\\xE1ndares del Fabricante:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Norma:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 17\n            }, this), \" \", fabricanteActual.norma]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Presi\\xF3n de gas:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 17\n            }, this), \" \", fabricanteActual.presionGas]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 567,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Ciclos de fatiga:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 17\n            }, this), \" \", fabricanteActual.ciclosFatiga]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlPanel, {\n      estadoConexion: estadoConexion,\n      lecturaActiva: lecturaActiva,\n      toggleLectura: toggleLectura\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensors-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setMostrarSensores(!mostrarSensores),\n        className: \"btn view-sensors\",\n        children: mostrarSensores ? 'OCULTAR SENSORES' : 'VER DATOS T√âCNICOS'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 7\n    }, this), mostrarSensores && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensors-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sensors-table-container\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"sensors-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Sensor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Valor\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 595,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"M\\xEDnimo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 596,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"M\\xE1ximo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Promedio\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: tipoActual.sensores.map(sensor => {\n              const dato = datosSensores[sensor.id];\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"sensor-icon\",\n                    style: {\n                      color: sensor.color\n                    },\n                    children: sensor.icono\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 608,\n                    columnNumber: 25\n                  }, this), sensor.nombre]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 607,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [Math.round((dato === null || dato === void 0 ? void 0 : dato.actual) || 0), \" \", sensor.unidad]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [Math.round((dato === null || dato === void 0 ? void 0 : dato.min) || 0), \" \", sensor.unidad]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 614,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [Math.round((dato === null || dato === void 0 ? void 0 : dato.max) || 0), \" \", sensor.unidad]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 615,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [Math.round((dato === null || dato === void 0 ? void 0 : dato.promedio) || 0), \" \", sensor.unidad]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 616,\n                  columnNumber: 23\n                }, this)]\n              }, sensor.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 606,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 601,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tests-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Pruebas Espec\\xEDficas Realizadas:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: pruebasRealizadas.map((prueba, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: prueba\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"diagnostic-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"DIAGN\\xD3STICO T\\xC9CNICO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DiagnosticWidget, {\n        diagnostico: diagnostico,\n        generarReporte: generarReporte,\n        procesando: procesando,\n        porcentajeProgreso: porcentajeProgreso,\n        lecturaActiva: lecturaActiva\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Sistema AmortiCheck Pro \\xA9 \", new Date().getFullYear()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WiAp5NBbBrn/MlEu+YXSnexVCnU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsPDF","autoTable","DiagnosticWidget","ControlPanel","jsxDEV","_jsxDEV","TIPOS_AMORTIGUADORES","id","nombre","descripcion","pruebas","sensores","min","max","unidad","color","icono","FABRICANTES","norma","presionGas","ciclosFatiga","App","_s","tipoAmortiguador","setTipoAmortiguador","fabricante","setFabricante","datosSensores","setDatosSensores","diagnostico","setDiagnostico","estado","estadoConexion","conectado","mensaje","error","lecturaActiva","setLecturaActiva","mostrarSensores","setMostrarSensores","procesando","setProcesando","porcentajeProgreso","setPorcentajeProgreso","datosFinales","setDatosFinales","pruebasRealizadas","setPruebasRealizadas","contadorDiagnosticos","setContadorDiagnosticos","lecturaActivaRef","intervaloRef","progresoRef","timeoutFinalRef","timeoutInicioSimRef","valoresBaseRef","pruebasIntervalRef","tipo","find","t","datosIniciales","forEach","sensor","actual","historial","promedio","current","clearRefs","clearInterval","clearTimeout","toggleLectura","nuevoEstado","startTime","Date","now","setInterval","elapsed","progress","Math","round","delay","random","setTimeout","iniciarSimulacion","estados","descripciones","colores","iconos","estadoActual","prev","obtenerValoresBase","valoresBase","vibracion","presion","temperatura","fuerza","presion_gas","resistencia","floor","_valoresBaseRef$curre","_valoresBaseRef$curre2","_valoresBaseRef$curre3","_valoresBaseRef$curre4","pruebaIndex","length","includes","nuevosDatos","clave","base","variacion","nuevoValor","slice","reduce","a","b","toFixed","generarReporte","fabricanteActual","f","datosParaReporte","doc","addImage","process","env","PUBLIC_URL","e","console","log","setFontSize","setFont","text","align","toLocaleDateString","pruebasY","prueba","index","yPos","startY","headers","data","map","dato","head","body","theme","styles","fontSize","headStyles","fillColor","finalY","lastAutoTable","recomendaciones","splitRecomendaciones","splitTextToSize","join","setTextColor","getFullYear","fechaReporte","toISOString","save","tipoActual","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","disabled","fab","onClick","style","_c","$RefreshReg$"],"sources":["C:/Users/TANTAN157/amorticheck-pro/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { jsPDF } from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport DiagnosticWidget from './components/DiagnosticWidget.jsx';\nimport ControlPanel from './components/ControlPanel.jsx';\nimport './App.css';\n\n// Tipos de amortiguadores con sus caracter√≠sticas espec√≠ficas\nconst TIPOS_AMORTIGUADORES = [\n  { \n    id: 'hidraulico', \n    nombre: 'Amortiguador Hidr√°ulico',\n    descripcion: 'Utiliza aceite para absorber energ√≠a a trav√©s de v√°lvulas internas',\n    pruebas: [\n      'Prueba de Fuerza vs. Velocidad (SAE J2788)',\n      'Prueba de Cavitaci√≥n (ASTM D4172)',\n      'Prueba de Fugas de Aceite'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: 'üì≥', nombre: 'Vibraci√≥n' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: 'üí®', nombre: 'Presi√≥n' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '¬∞C', color: '#0D47A1', icono: 'üå°Ô∏è', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '‚ö°', nombre: 'Fuerza' },\n    ]\n  },\n  { \n    id: 'gas_monotubo', \n    nombre: 'Amortiguador de Gas (Monotubo)',\n    descripcion: 'Usa aceite y gas nitr√≥geno a alta presi√≥n para mejor respuesta',\n    pruebas: [\n      'Medici√≥n de Presi√≥n de Gas (20-30 bar)',\n      'Prueba de Respuesta R√°pida (ISO 18137)',\n      'Prueba de Durabilidad (500,000 ciclos)'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: 'üì≥', nombre: 'Vibraci√≥n' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: 'üí®', nombre: 'Presi√≥n' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '¬∞C', color: '#0D47A1', icono: 'üå°Ô∏è', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '‚ö°', nombre: 'Fuerza' },\n      { id: 'presion_gas', min: 0, max: 40, unidad: 'bar', color: '#FF5722', icono: '‚õΩ', nombre: 'Presi√≥n Gas' },\n    ]\n  },\n  { \n    id: 'gas_dobletubo', \n    nombre: 'Amortiguador de Gas (Doble Tubo)',\n    descripcion: 'Combina aceite con gas nitr√≥geno a baja presi√≥n',\n    pruebas: [\n      'Prueba de Estanqueidad en Agua',\n      'Prueba de Impacto (Salt Test)',\n      'Prueba de Fuerza Din√°mica'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: 'üì≥', nombre: 'Vibraci√≥n' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: 'üí®', nombre: 'Presi√≥n' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '¬∞C', color: '#0D47A1', icono: 'üå°Ô∏è', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '‚ö°', nombre: 'Fuerza' },\n    ]\n  },\n  { \n    id: 'regulable', \n    nombre: 'Amortiguador Regulable',\n    descripcion: 'Permite ajustar la dureza (modos Sport/Comfort)',\n    pruebas: [\n      'Prueba de Resistencia El√©ctrica (2-10 Œ©)',\n      'Prueba de Respuesta a Se√±ales PWM',\n      'Prueba de Compatibilidad CAN Bus'\n    ],\n    sensores: [\n      { id: 'vibracion', min: 0, max: 100, unidad: 'Hz', color: '#1E88E5', icono: 'üì≥', nombre: 'Vibraci√≥n' },\n      { id: 'presion', min: 0, max: 100, unidad: 'kPa', color: '#1565C0', icono: 'üí®', nombre: 'Presi√≥n' },\n      { id: 'temperatura', min: 0, max: 150, unidad: '¬∞C', color: '#0D47A1', icono: 'üå°Ô∏è', nombre: 'Temperatura' },\n      { id: 'fuerza', min: 0, max: 1000, unidad: 'N', color: '#1976D2', icono: '‚ö°', nombre: 'Fuerza' },\n      { id: 'resistencia', min: 0, max: 20, unidad: 'Œ©', color: '#9C27B0', icono: 'üîå', nombre: 'Resistencia' },\n    ]\n  }\n];\n\n// Fabricantes con sus est√°ndares espec√≠ficos\nconst FABRICANTES = [\n  { id: 'bilstein', nombre: 'Bilstein', norma: 'B46-0001', presionGas: '25-30 bar', ciclosFatiga: '500,000' },\n  { id: 'kyb', nombre: 'KYB', norma: 'KES 07.202', presionGas: 'N/A', ciclosFatiga: '200,000' },\n  { id: 'monroe', nombre: 'Monroe', norma: 'M-CARE 3.0', presionGas: 'N/A', ciclosFatiga: '200,000' },\n  { id: 'ohlins', nombre: '√ñhlins', norma: 'TTX Series', presionGas: '20-25 bar', ciclosFatiga: '1,000,000+' },\n  { id: 'sachs', nombre: 'Sachs', norma: 'SRE 4.2', presionGas: 'N/A', ciclosFatiga: '300,000' },\n];\n\nfunction App() {\n  const [tipoAmortiguador, setTipoAmortiguador] = useState('gas_monotubo');\n  const [fabricante, setFabricante] = useState('bilstein');\n  const [datosSensores, setDatosSensores] = useState({});\n  const [diagnostico, setDiagnostico] = useState({\n    estado: 'Desconocido',\n    descripcion: 'Selecciona el tipo de amortiguador y fabricante para comenzar',\n    color: '#9E9E9E',\n    icono: '‚ùì',\n  });\n  const [estadoConexion,] = useState({\n    conectado: true,\n    mensaje: 'Sistema listo',\n  });\n  const [error, ] = useState(null);\n  const [lecturaActiva, setLecturaActiva] = useState(false);\n  const [mostrarSensores, setMostrarSensores] = useState(false);\n  const [procesando, setProcesando] = useState(false);\n  const [porcentajeProgreso, setPorcentajeProgreso] = useState(0);\n  const [datosFinales, setDatosFinales] = useState(null);\n  const [pruebasRealizadas, setPruebasRealizadas] = useState([]);\n  const [contadorDiagnosticos, setContadorDiagnosticos] = useState(0);\n  \n  const lecturaActivaRef = useRef(lecturaActiva);\n  const intervaloRef = useRef(null);\n  const progresoRef = useRef(null);\n  const timeoutFinalRef = useRef(null);\n  const timeoutInicioSimRef = useRef(null);\n  const valoresBaseRef = useRef(null);\n  const pruebasIntervalRef = useRef(null);\n\n  // Inicializar datos de sensores seg√∫n el tipo seleccionado\n  useEffect(() => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    const datosIniciales = {};\n    \n    tipo.sensores.forEach(sensor => {\n      datosIniciales[sensor.id] = {\n        actual: 0,\n        historial: [],\n        min: 0,\n        max: 0,\n        promedio: 0\n      };\n    });\n    \n    setDatosSensores(datosIniciales);\n  }, [tipoAmortiguador]);\n\n  // Mantener la ref actualizada\n  useEffect(() => {\n    lecturaActivaRef.current = lecturaActiva;\n  }, [lecturaActiva]);\n\n  // Limpiar intervalos y timeouts al desmontar\n  useEffect(() => {\n    return () => {\n      clearRefs();\n    };\n  }, []);\n\n  // Funci√≥n para limpiar todas las referencias\n  const clearRefs = () => {\n    if (intervaloRef.current) clearInterval(intervaloRef.current);\n    if (progresoRef.current) clearInterval(progresoRef.current);\n    if (timeoutFinalRef.current) clearTimeout(timeoutFinalRef.current);\n    if (timeoutInicioSimRef.current) clearTimeout(timeoutInicioSimRef.current);\n    if (pruebasIntervalRef.current) clearInterval(pruebasIntervalRef.current);\n    \n    intervaloRef.current = null;\n    progresoRef.current = null;\n    timeoutFinalRef.current = null;\n    timeoutInicioSimRef.current = null;\n    pruebasIntervalRef.current = null;\n  };\n\n  // Iniciar/detener la lectura\n  const toggleLectura = () => {\n    const nuevoEstado = !lecturaActiva;\n    setLecturaActiva(nuevoEstado);\n    \n    if (nuevoEstado) {\n      // Limpiar cualquier proceso previo\n      clearRefs();\n      \n      // Resetear datos a ceros\n      const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n      const datosIniciales = {};\n      \n      tipo.sensores.forEach(sensor => {\n        datosIniciales[sensor.id] = {\n          actual: 0,\n          historial: [],\n          min: 0,\n          max: 0,\n          promedio: 0\n        };\n      });\n      \n      setDatosSensores(datosIniciales);\n      setPruebasRealizadas([]);\n      \n      setProcesando(true);\n      setPorcentajeProgreso(0);\n      setDatosFinales(null);\n      \n      // Mensaje de evaluaci√≥n inicial\n      setDiagnostico({\n        estado: 'Evaluando',\n        descripcion: 'Iniciando pruebas espec√≠ficas...',\n        color: '#FF9800',\n        icono: '‚è≥',\n      });\n      \n      // Barra de progreso (30 segundos)\n      const startTime = Date.now();\n      progresoRef.current = setInterval(() => {\n        const elapsed = Date.now() - startTime;\n        const progress = Math.min(100, (elapsed / 30000) * 100);\n        // Mostrar como n√∫mero entero\n        setPorcentajeProgreso(Math.round(progress));\n      }, 100);\n      \n      // Retraso aleatorio para inicio de simulaci√≥n (10-15 segundos)\n      const delay = 10000 + Math.random() * 5000;\n      timeoutInicioSimRef.current = setTimeout(() => {\n        setDiagnostico({\n          estado: 'Evaluando',\n          descripcion: 'Realizando pruebas t√©cnicas...',\n          color: '#FF9800',\n          icono: '‚è≥',\n        });\n        \n        iniciarSimulacion();\n      }, delay);\n\n      // Programar el diagn√≥stico final despu√©s de 30 segundos\n      timeoutFinalRef.current = setTimeout(() => {\n        const estados = ['√ìPTIMO', 'CR√çTICO', 'ACEPTABLE'];\n        const descripciones = [\n          'El amortiguador funciona en condiciones √≥ptimas seg√∫n los est√°ndares del fabricante.',\n          'El amortiguador requiere intervenci√≥n inmediata seg√∫n los resultados de las pruebas.',\n          'El amortiguador muestra signos de desgaste, se recomienda revisi√≥n.'\n        ];\n        const colores = ['#4CAF50', '#F44336', '#FF9800'];\n        const iconos = ['‚úÖ', '‚ùå', '‚ö†Ô∏è'];\n        \n        // Obtener el estado actual basado en el contador (0,1,2) y luego rotar\n        const estadoActual = contadorDiagnosticos % 3;\n        \n        // Guardar los datos finales antes de detener\n        setDatosSensores(prev => {\n          setDatosFinales({...prev});\n          return prev;\n        });\n        \n        setDiagnostico({\n          estado: estados[estadoActual],\n          descripcion: descripciones[estadoActual],\n          color: colores[estadoActual],\n          icono: iconos[estadoActual],\n        });\n        \n        // Incrementar el contador para el pr√≥ximo diagn√≥stico\n        setContadorDiagnosticos(prev => prev + 1);\n        \n        setProcesando(false);\n      }, 30000); // 30 segundos\n    } else {\n      // Detener completamente\n      setProcesando(false);\n      setPorcentajeProgreso(0);\n      \n      // Limpiar todos los intervalos y timeouts\n      clearRefs();\n      \n      // Resetear datos a ceros\n      const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n      const datosIniciales = {};\n      \n      tipo.sensores.forEach(sensor => {\n        datosIniciales[sensor.id] = {\n          actual: 0,\n          historial: [],\n          min: 0,\n          max: 0,\n          promedio: 0\n        };\n      });\n      \n      setDatosSensores(datosIniciales);\n      \n      // Volver al estado inicial\n      setDiagnostico({\n        estado: 'Desconocido',\n        descripcion: 'Diagn√≥stico detenido. Listo para nueva evaluaci√≥n.',\n        color: '#9E9E9E',\n        icono: '‚ùì',\n      });\n    }\n  };\n\n  // Obtener valores base seg√∫n tipo de amortiguador\n  const obtenerValoresBase = () => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    \n    // Valores base seg√∫n el estado del amortiguador\n    const valoresBase = {\n      0: { // √ìPTIMO\n        vibracion: { min: 5, max: 15 },\n        presion: { min: 30, max: 50 },\n        temperatura: { min: 25, max: 40 },\n        fuerza: { min: 700, max: 900 },\n        presion_gas: { min: tipo.id === 'gas_monotubo' ? 25 : 0, max: tipo.id === 'gas_monotubo' ? 30 : 0 },\n        resistencia: { min: 2, max: 10 }\n      },\n      1: { // CR√çTICO\n        vibracion: { min: 40, max: 60 },\n        presion: { min: 5, max: 20 },\n        temperatura: { min: 60, max: 80 },\n        fuerza: { min: 200, max: 400 },\n        presion_gas: { min: tipo.id === 'gas_monotubo' ? 10 : 0, max: tipo.id === 'gas_monotubo' ? 15 : 0 },\n        resistencia: { min: 0, max: 1 }\n      },\n      2: { // ACEPTABLE\n        vibracion: { min: 20, max: 35 },\n        presion: { min: 20, max: 40 },\n        temperatura: { min: 40, max: 55 },\n        fuerza: { min: 500, max: 700 },\n        presion_gas: { min: tipo.id === 'gas_monotubo' ? 20 : 0, max: tipo.id === 'gas_monotubo' ? 25 : 0 },\n        resistencia: { min: 1, max: 2 }\n      }\n    };\n    \n    return valoresBase;\n  };\n\n  // Iniciar simulaci√≥n realista\n  const iniciarSimulacion = () => {\n    const valoresBase = obtenerValoresBase();\n    const estado = Math.floor(Math.random() * 3); // Estado aleatorio para simulaci√≥n\n    \n    valoresBaseRef.current = valoresBase[estado];\n    \n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    \n    // Crear datos iniciales\n    const datosIniciales = {};\n    tipo.sensores.forEach(sensor => {\n      datosIniciales[sensor.id] = {\n        actual: valoresBaseRef.current[sensor.id]?.min || 0,\n        historial: [],\n        min: valoresBaseRef.current[sensor.id]?.min || 0,\n        max: valoresBaseRef.current[sensor.id]?.min || 0,\n        promedio: valoresBaseRef.current[sensor.id]?.min || 0\n      };\n    });\n    \n    setDatosSensores(datosIniciales);\n    \n    // Iniciar pruebas espec√≠ficas\n    pruebasIntervalRef.current = setInterval(() => {\n      const pruebaIndex = Math.floor(Math.random() * tipo.pruebas.length);\n      if (!pruebasRealizadas.includes(tipo.pruebas[pruebaIndex])) {\n        setPruebasRealizadas(prev => [...prev, tipo.pruebas[pruebaIndex]]);\n      }\n    }, 5000);\n    \n    // Iniciar intervalo para actualizar datos\n    if (intervaloRef.current) clearInterval(intervaloRef.current);\n    \n    intervaloRef.current = setInterval(() => {\n      setDatosSensores(prev => {\n        const nuevosDatos = { ...prev };\n        \n        tipo.sensores.forEach(sensor => {\n          const clave = sensor.id;\n          const base = valoresBaseRef.current[clave];\n          \n          if (!base) return;\n          \n          // Generar nuevo valor con variaci√≥n realista\n          const variacion = (Math.random() - 0.5) * (base.max - base.min) * 0.1;\n          const nuevoValor = Math.max(\n            base.min, \n            Math.min(\n              base.max, \n              prev[clave].actual + variacion\n            )\n          );\n          \n          // Mantener valores dentro de l√≠mites realistas\n          const historial = [...prev[clave].historial, nuevoValor].slice(-30);\n          const min = Math.min(prev[clave].min, nuevoValor);\n          const max = Math.max(prev[clave].max, nuevoValor);\n          const promedio = historial.reduce((a, b) => a + b, 0) / historial.length;\n          \n          nuevosDatos[clave] = {\n            actual: +nuevoValor.toFixed(2),\n            historial,\n            min: +min.toFixed(2),\n            max: +max.toFixed(2),\n            promedio: +promedio.toFixed(2),\n          };\n        });\n        \n        return nuevosDatos;\n      });\n    }, 500); // Actualizar cada 500ms para una apariencia realista\n  };\n\n  // Generar y descargar reporte PDF\n  const generarReporte = () => {\n    const tipo = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n    const fabricanteActual = FABRICANTES.find(f => f.id === fabricante);\n    \n    // Usar datos finales si est√°n disponibles\n    const datosParaReporte = datosFinales || datosSensores;\n    \n    // Crear nuevo documento PDF\n    const doc = new jsPDF();\n    \n    // Logo y t√≠tulo\n    try {\n      doc.addImage(`${process.env.PUBLIC_URL}/amorticheck.png`, 'PNG', 80, 10, 50, 20);\n    } catch (e) {\n      console.log(\"Logo no cargado\");\n    }\n    \n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Reporte T√©cnico de Diagn√≥stico\", 105, 40, { align: 'center' });\n    \n    // Informaci√≥n del amortiguador\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Tipo de Amortiguador:\", 20, 55);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${tipo.nombre} - ${tipo.descripcion}`, 20, 62);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Fabricante:\", 20, 72);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${fabricanteActual.nombre} (Norma: ${fabricanteActual.norma})`, 20, 79);\n    \n    // Estado y fecha\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Estado del Diagn√≥stico:\", 20, 89);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${diagnostico.estado} - ${diagnostico.descripcion}`, 20, 96);\n    \n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Fecha:\", 20, 106);\n    doc.setFont('helvetica', 'normal');\n    doc.text(`${new Date().toLocaleDateString()}`, 20, 113);\n    \n    // Pruebas realizadas\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Pruebas Realizadas:\", 20, 123);\n    doc.setFont('helvetica', 'normal');\n    const pruebasY = 130;\n    tipo.pruebas.forEach((prueba, index) => {\n      const yPos = pruebasY + (index * 7);\n      doc.text(`‚Ä¢ ${prueba}`, 20, yPos);\n    });\n    \n    // Datos de sensores\n    const startY = pruebasY + (tipo.pruebas.length * 7) + 10;\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Datos T√©cnicos de Sensores:\", 20, startY);\n    \n    // Tabla de sensores\n    const headers = [['Sensor', 'Valor', 'M√≠nimo', 'M√°ximo', 'Promedio']];\n    const data = tipo.sensores.map(sensor => {\n      const dato = datosParaReporte[sensor.id];\n      return [\n        sensor.nombre, \n        `${Math.round(dato.actual)} ${sensor.unidad}`, \n        `${Math.round(dato.min)} ${sensor.unidad}`, \n        `${Math.round(dato.max)} ${sensor.unidad}`, \n        `${Math.round(dato.promedio)} ${sensor.unidad}`\n      ];\n    });\n    \n    autoTable(doc, {\n      startY: startY + 5,\n      head: headers,\n      body: data,\n      theme: 'grid',\n      styles: { fontSize: 10 },\n      headStyles: { fillColor: '#2c3e50' }\n    });\n    \n    // Est√°ndares del fabricante\n    const finalY = doc.lastAutoTable ? doc.lastAutoTable.finalY + 10 : 150;\n    doc.setFont('helvetica', 'bold');\n    doc.text(\"Est√°ndares del Fabricante:\", 20, finalY);\n    \n    doc.setFontSize(11);\n    doc.setFont('helvetica', 'normal');\n    const recomendaciones = [\n      `‚Ä¢ Norma aplicada: ${fabricanteActual.norma}`,\n      `‚Ä¢ Presi√≥n de gas: ${fabricanteActual.presionGas}`,\n      `‚Ä¢ Ciclos de fatiga: ${fabricanteActual.ciclosFatiga}`\n    ];\n    const splitRecomendaciones = doc.splitTextToSize(recomendaciones.join('\\n'), 170);\n    doc.text(splitRecomendaciones, 20, finalY + 10);\n    \n    // Pie de p√°gina\n    doc.setFontSize(10);\n    doc.setTextColor(100);\n    doc.text(\"Sistema AmortiCheck Pro ¬© \" + new Date().getFullYear(), 105, 280, { align: 'center' });\n    \n    // Descargar el PDF\n    const fechaReporte = new Date().toISOString().slice(0, 10);\n    doc.save(`reporte-${tipo.id}-${fechaReporte}.pdf`);\n  };\n\n  const tipoActual = TIPOS_AMORTIGUADORES.find(t => t.id === tipoAmortiguador);\n  const fabricanteActual = FABRICANTES.find(f => f.id === fabricante);\n\n  return (\n    <div className=\"app\">\n      <header className=\"app-header\">\n        <div className=\"logo-container\">\n          <img src={`${process.env.PUBLIC_URL}/amorticheck.png`} alt=\"Logo AmortiCheck\" className=\"app-logo\" />\n        </div>\n        <div className=\"app-title\">\n          <div className=\"title-container\">\n            <h1>AMORTICHECK PRO</h1>\n            <p className=\"app-subtitle\">Sistema Avanzado de Diagn√≥stico de Amortiguadores</p>\n          </div>\n        </div>\n      </header>\n      \n      {error && (\n        <div className=\"error-message\">\n          ‚ö†Ô∏è {error}\n        </div>\n      )}\n      \n      <div className=\"configuration-panel\">\n        <h3>Configuraci√≥n del Diagn√≥stico</h3>\n        \n        <div className=\"config-row\">\n          <div className=\"config-group\">\n            <label>Tipo de Amortiguador:</label>\n            <select \n              value={tipoAmortiguador} \n              onChange={(e) => setTipoAmortiguador(e.target.value)}\n              disabled={lecturaActiva}\n            >\n              {TIPOS_AMORTIGUADORES.map(tipo => (\n                <option key={tipo.id} value={tipo.id}>{tipo.nombre}</option>\n              ))}\n            </select>\n          </div>\n          \n          <div className=\"config-group\">\n            <label>Fabricante:</label>\n            <select \n              value={fabricante} \n              onChange={(e) => setFabricante(e.target.value)}\n              disabled={lecturaActiva}\n            >\n              {FABRICANTES.map(fab => (\n                <option key={fab.id} value={fab.id}>{fab.nombre}</option>\n              ))}\n            </select>\n          </div>\n        </div>\n        \n        <div className=\"config-description\">\n          <strong>{tipoActual.nombre}:</strong> {tipoActual.descripcion}\n        </div>\n        \n        <div className=\"config-standards\">\n          <h4>Est√°ndares del Fabricante:</h4>\n          <ul>\n            <li><strong>Norma:</strong> {fabricanteActual.norma}</li>\n            <li><strong>Presi√≥n de gas:</strong> {fabricanteActual.presionGas}</li>\n            <li><strong>Ciclos de fatiga:</strong> {fabricanteActual.ciclosFatiga}</li>\n          </ul>\n        </div>\n      </div>\n      \n      <ControlPanel \n        estadoConexion={estadoConexion}\n        lecturaActiva={lecturaActiva}\n        toggleLectura={toggleLectura}\n      />\n      \n      <div className=\"sensors-toggle\">\n        <button \n          onClick={() => setMostrarSensores(!mostrarSensores)}\n          className=\"btn view-sensors\"\n        >\n          {mostrarSensores ? 'OCULTAR SENSORES' : 'VER DATOS T√âCNICOS'}\n        </button>\n      </div>\n      \n      {mostrarSensores && (\n        <div className=\"sensors-section\">\n          <div className=\"sensors-table-container\">\n            <table className=\"sensors-table\">\n              <thead>\n                <tr>\n                  <th>Sensor</th>\n                  <th>Valor</th>\n                  <th>M√≠nimo</th>\n                  <th>M√°ximo</th>\n                  <th>Promedio</th>\n                </tr>\n              </thead>\n              <tbody>\n                {tipoActual.sensores.map(sensor => {\n                  const dato = datosSensores[sensor.id];\n                  \n                  return (\n                    <tr key={sensor.id}>\n                      <td>\n                        <span className=\"sensor-icon\" style={{ color: sensor.color }}>\n                          {sensor.icono}\n                        </span>\n                        {sensor.nombre}\n                      </td>\n                      <td>{Math.round(dato?.actual || 0)} {sensor.unidad}</td>\n                      <td>{Math.round(dato?.min || 0)} {sensor.unidad}</td>\n                      <td>{Math.round(dato?.max || 0)} {sensor.unidad}</td>\n                      <td>{Math.round(dato?.promedio || 0)} {sensor.unidad}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          \n          <div className=\"tests-container\">\n            <h4>Pruebas Espec√≠ficas Realizadas:</h4>\n            <ul>\n              {pruebasRealizadas.map((prueba, index) => (\n                <li key={index}>{prueba}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"diagnostic-section\">\n        <h2>DIAGN√ìSTICO T√âCNICO</h2>\n        <DiagnosticWidget \n          diagnostico={diagnostico} \n          generarReporte={generarReporte} \n          procesando={procesando}\n          porcentajeProgreso={porcentajeProgreso}\n          lecturaActiva={lecturaActiva}\n        />\n      </div>\n      \n      <footer className=\"app-footer\">\n        <p>Sistema AmortiCheck Pro &copy; {new Date().getFullYear()}</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}